---
- name: Setup Testing Parameters
  hosts:
    - kafka_connect
  tasks:
    - set_fact: topic_name="{{ test_prefix }}-{{ partitions }}-{{ replication }}"
    - set_fact: timestamp= "{{ ansible_date_time.iso8601_basic_short }}"

- name: Setup Topic
  hosts:
    - kafka_connect
  tasks:
    - debug:
         msg: Preparing topic {{ topic_name }}

    - name: Check if topic {{ topic_name }} exists
      command: >-
        kafka-topics
        --bootstrap-server {{bootstrap}}
        --list
        --topic {{ topic_name }}
      register: topiclist

    - debug:
         var: topiclist.stdout

    - name: Delete topic {{ topic_name }} if it exists
      command: >-
        kafka-topics
        --bootstrap-server {{ bootstrap }}
        --topic {{ topic_name }}
        --delete
      when: topiclist.stdout == topic_name

    - pause:
        seconds: 10

    - name: Check again if topic {{ topic_name }} exists
      command: >-
        kafka-topics
        --bootstrap-server {{bootstrap}}
        --list
        --topic {{ topic_name }}
      register: topiclist

    - debug:
         var: topiclist.stdout

    - name: Creating topic
      command: >-
        kafka-topics
        --bootstrap-server {{ bootstrap }}
        --topic {{ topic_name }}
        --create --partitions {{ partitions }}
        --replication-factor {{ replication }}
        --config retention.ms={{ retention }}
        --config min.insync.replicas=2
      when: topiclist.stdout != topic_name

    - pause:
        seconds: 10

- name: Testing Producer
  #strategy: free
  hosts:
    - kafka_connect
  gather_facts: yes
  tasks:
    - name: Produce messages {{ inventory_hostname }}
      shell: >-
        kafka-producer-perf-test
        --topic {{ topic_name }}
        --producer-props
        bootstrap.servers={{ bootstrap }}
        acks={{ acks }}
        buffer.memory=67108864
        batch.size=64000
        compression.type={{ compression }}
        client.id={{ inventory_hostname }}-producer
        --record-size {{ record_size }}
        --throughput {{ throughput }}
        --num-records {{ num_records}} 2>&1| tee -a /tmp/producer_{{ inventory_hostname }}_{{ topic_name }}.csv
      register: producer_sleeper
      async: 518400
      poll: 5

    - name: wait for producers to end
      async_status:
        jid: "{{ producer_sleeper.ansible_job_id }}"
      register: producer_results
      until: producer_results.finished
      retries: 518400

    - debug:
        var: producer_results.stdout

    - name: Fetch producer results
      fetch:
        remote_src: true
        src: "/tmp/{{ item }}"
        dest: "./results/{{ timestamp }}"
      loop:
        - "producer_{{ inventory_hostname }}_{{ topic_name }}.csv"

    - name: Save Producer summary
      copy:
        content: "{{ producer_results }}"
        dest: "./results/{{ timestamp }}/producer_{{ inventory_hostname }}_summary_{{ topic_name }}.json"
      delegate_to: localhost

- name: Testing Consumer
  #strategy: free
  hosts:
    - kafka_connect
  gather_facts: yes
  tasks:
    - name: Consumer messages {{ inventory_hostname }}
      shell: >-
        kafka-consumer-perf-test
        --broker-list {{ bootstrap }}
        --group {{ inventory_hostname }}-consumer
        --topic {{ topic_name }}
        --messages {{ num_records }}
        --show-detailed-stats 2>&1| tee -a /tmp/consumer_{{ inventory_hostname }}_{{ topic_name }}.csv
      environment:
        CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.4.1.jar
      register: consumer_sleeper
      async: 518400
      poll: 0

    - name: Wait for consumers to complete
      async_status:
        jid: "{{ consumer_sleeper.ansible_job_id }}"
      register: consumer_results
      until: consumer_results.finished
      retries: 518400

    - debug:
         var: consumer_results.stdout

    - name: Fetch Consumer results
      fetch:
        remote_src: true
        src: "/tmp/{{ item }}"
        dest: "./results/{{ timestamp }}"
      loop:
        - "consumer_{{ inventory_hostname }}_{{ topic_name }}.csv"

    - name: Save Consumer summary
      copy:
        content: "{{ consumer_results }}"
        dest: "./results/{{ timestamp }}/consumer_{{ inventory_hostname }}_summary_{{ topic_name }}.json"
      delegate_to: localhost

